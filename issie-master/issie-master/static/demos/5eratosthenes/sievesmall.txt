// Eratosthenes's Sieve
// ---------------------
//
// R0 temp
// R1 next location in output array
// R2 current prime number: P
// R3 is current multiple of prime number : M
// R4 is address of end of sieve array, R4 + 1 is the start of prime number output array
// R5 is the last number to check for primality, sqrt of the sieve size.
// The sieve size here will require approx 800,000 clock cycles to compute.
          // Set constant registers
          MOV R4, #100 // set R4 = 100
          MOV R5, #10 // set R5 = 10
          // set initial value of loop registers
          MOV R2, #2 // first prime number is 2
          MOV R1, R4 // start of output array is end of sieve.

LOOP1     ADD R1, #1   // increment output location address   
          STR R2, [R1] // mem[R1] := R2; store prime in output array
          MOV R3, R2  // first multiple is 1*P

LOOP2     STR R2, [R3] // mem[R3] := R2; we need to store any non-zero number in the sieve array. R2 here must be non-zero.
          ADD R3, R3, R2
          CMP R3, R4
          JCC LOOP2 // continue with next multiple

LOOP3     ADD R2, #1 // next position in sieve array
          LDR R0, [R2] // R0 := mem[R2]; load next sieve array location
          MOV R0, R0 // set NZ flags on R0
          JNE LOOP3 // Loop until 0 in sieve array is found
          CMP R2, R5
          JLE LOOP1 // continue with next prime if this is less than R5, which should be sqrt of sieve size.
          // at this point all the sieve locations containing zero represent primes.
          // R2 scans through the rest of the sieve recording all the prime numbers.

LOOP4     STR R2, [R1] // mem[R1] := R2; put next prime number in output array
          ADD R1, #1 // move to next position in output array

LOOP5     ADD R2, #1   // move to check next number in sieve
          LDR R0, [R2] // R0 := mem[R2]
          MOV R0, R0   // set NZ flags on R0
          JNE LOOP5    // loop till next number in sieve is a prime (sieve = 0)
          CMP R2, R4   // continue filling output array with primes till end of sieve array.
          JCC LOOP4
          JMP 0  // stop
